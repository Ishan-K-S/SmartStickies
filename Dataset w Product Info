pip install openpyxl openai requests pillow
export OPENAI_API_KEY="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"
from openpyxl import load_workbook
import openai
import os
import requests
from PIL import Image
from io import BytesIO

# Set your OpenAI API key
openai.api_key = os.getenv("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")  # Set your API key as an environment variable

# Load the Excel file
file_path = "Example Product.xlsx"
sheet_name = "Sheet1"  # Assuming the data is in Sheet1

# Load the workbook and select the sheet
workbook = load_workbook(file_path)
sheet = workbook[sheet_name]

# Function to generate an image using DALL-E
def generate_image(prompt, product_code):
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,  # Number of images to generate
            size="256x256"  # Image size (can be 256x256, 512x512, or 1024x1024)
        )
        image_url = response['data'][0]['url']
        
        # Download and save the image
        image_response = requests.get(image_url)
        image = Image.open(BytesIO(image_response.content))
        image.save(f"product_{product_code}.png")
        print(f"Image saved as product_{product_code}.png")
        return image_url
    except Exception as e:
        print(f"Error generating image: {e}")
        return None

# Function to extract product information based on category or product name
def get_product_info(category=None, product_name=None):
    results = []
    current_category = None
    product_code = 1  # Unique code for each product

    # Iterate through the rows in the sheet
    for row in sheet.iter_rows(min_row=2, values_only=True):  # Skip the header row
        # Check if the row contains a category header
        if row[0] and "Catergory" in str(row[0]):
            current_category = str(row[0]).replace("Catergory", "").strip()
            continue  # Skip the category row
        
        # If a category is specified, only process rows within that category
        if category and current_category != category:
            continue
        
        # If a product name is specified, only process rows matching that product name
        if product_name and product_name.lower() not in str(row[1]).lower():
            continue
        
        # Extract product details
        if row[1] and row[2]:  # Ensure product title and price are not empty
            product_info = {
                "Category": current_category,
                "Product Title": row[1],
                "Price": row[2],
                "Description": row[3],
                "Product Code": f"PROD{product_code:03}",  # Unique product code
                "Related Items": []
            }
            results.append(product_info)
            product_code += 1
    
    # Add related items within the same category
    if category:
        for result in results:
            related_items = [
                item["Product Title"] for item in results
                if item["Category"] == result["Category"] and item["Product Title"] != result["Product Title"]
            ]
            result["Related Items"] = related_items
    
    return results

# Function to display product information and generate images
def display_product_info(product_info):
    for product in product_info:
        print(f"Category: {product['Category']}")
        print(f"Product Title: {product['Product Title']}")
        print(f"Price: ${product['Price']}")
        print(f"Description: {product['Description']}")
        print(f"Product Code: {product['Product Code']}")
        if product["Related Items"]:
            print(f"Related Items: {', '.join(product['Related Items'])}")
        
        # Generate an image using DALL-E
        prompt = f"A high-quality image of {product['Product Title']}: {product['Description']}"
        image_url = generate_image(prompt, product["Product Code"])
        if image_url:
            print(f"Generated Image URL: {image_url}")
        print("-" * 40)

# Example usage
if __name__ == "__main__":
    # Prompt the user for input
    category = input("Enter a category (e.g., Hard Goods, Cleaning products, Syrups, Services): ").strip()
    product_name = input("Enter a product name (optional, press Enter to skip): ").strip()

    # Get product information
    product_info = get_product_info(category=category if category else None, product_name=product_name if product_name else None)

    # Display the results
    if product_info:
        display_product_info(product_info)
    else:
        print("No products found matching your criteria.")
